version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.16
  aws-cli: circleci/aws-cli@1.3.0

jobs: 
  deploy:
    machine:
      image: ubuntu-1604:202007-01 
    parameters:
      stage:
        description: "The specific stage to deploy Winged Keys to (qa, devsecure, staging, prod)"
        type: string
      dotnet-env:
        description: "The runtime environment to be used to configure the .NET application (Development, Staging, Production)"
        type: string
        default: "Development"
      additional-clients:
        description: "Any additional FQDNs for existing clients that will require programmatic access to Winged Keys.  Be sure to put a ',' at the end of this parameter when specified!"
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Manually install the .NET SDK
          command: |
            sudo apt-get install -y gnupg2
            wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
            sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
            wget https://packages.microsoft.com/config/ubuntu/16.04/prod.list
            sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
            sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
            sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
            sudo apt-get update; \
              sudo apt-get install -y apt-transport-https && \
              sudo apt-get update && \
              sudo apt-get install -y dotnet-sdk-3.1
      - run:
          name: Install Global .NET Tools (Entity Framework & Elastic Beanstalk)
          command: |
            dotnet tool install --global dotnet-ef --version 3.1.6
            dotnet tool install --global Amazon.ElasticBeanstalk.Tools
            echo 'export PATH="$PATH:$HOME/.dotnet/tools/"' >> $BASH_ENV
      - run:
          name: Install JQ 1.6 from GitHub # Because apparently the '--rawfile' param isn't in Linux v1.5
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq-linux64
            sudo mv jq-linux64 $(which jq)
      - aws-cli/setup
      - run:
          name: Download and Parse AWS Secrets
          command: |
            cd src/WingedKeys
            aws secretsmanager get-secret-value --secret-id /ece/<< parameters.stage >>/wingedkeys/admin > secrets.json
            jq '.SecretString | fromjson' secrets.json > tmp.json && mv tmp.json secrets.json
            jq '.ConnectionStrings={ WINGEDKEYS: ."ConnectionStrings.WINGEDKEYS" }' secrets.json > tmp.json && mv tmp.json secrets.json
            jq 'del(.["ConnectionStrings.WINGEDKEYS"])' secrets.json > tmp.json && mv tmp.json secrets.json
      - run:
          name: Download and Parse SendGrid Email API Key
          command: |
            cd src/WingedKeys
            aws secretsmanager get-secret-value --secret-id /sendgrid/admin > sendgrid.json
            jq '.SecretString | fromjson' sendgrid.json > tmp.json && mv tmp.json sendgrid.json
      - aws-s3/copy:
          from: 's3://ece-wingedkeys-<< parameters.stage >>-store/secrets/server.pfx'
          to: src/WingedKeys/
      - aws-s3/copy:
          from: 's3://ece-wingedkeys-<< parameters.stage >>-store/secrets/password.txt'
          to: src/WingedKeys/
      - run:
          name: 'Update Appsettings with environment specific variables'
          command: |
            cd src/WingedKeys
            jq '.AccessTokenLifetime="1800"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.BaseUri="https://<< parameters.stage >>.ece-wingedkeys.ctoecskylight.com"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.CertificateFileName="server.pfx"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq --rawfile password password.txt '.CertificatePassword=($password | rtrimstr("\n"))' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.ClientUris="<< parameters.additional-clients >>https://<< parameters.stage >>.ece-hedwig.ctoecskylight.com,https://localhost:5001,https://<< parameters.stage >>.ece-fawkes.ctoecskylight.com"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.EnvironmentName="<< parameters.dotnet-env >>"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogGroup="/aws/elasticbeanstalk/ece-wingedkeys-<< parameters.stage >>-env/app-log"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.Default="Information"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.Microsoft="Warning"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.LogLevel.System="Warning"' appsettings.json > temp.json && mv temp.json appsettings.json
            jq '.Logging.Region="us-east-2"' appsettings.json > temp.json && mv temp.json appsettings.json

            # Remove from appsettings.json, as they will be replaced with the corresponding secrets pulled from AWS
            jq 'del(.AdminPassword)' appsettings.json > temp.json && mv temp.json appsettings.json
            jq 'del(.ConnectionStrings)' appsettings.json > temp.json && mv temp.json appsettings.json
      - run:
          name: Merge Appsettings Config with AWS Secrets
          command: |
            cd src/WingedKeys
            jq -s '.[0] + .[1]' secrets.json appsettings.json > final_tmp.json && mv final_tmp.json appsettings.json
      - run:
          name: Merge Appsettings Config with SendGrid API Key
          command: |
            cd src/WingedKeys
            jq -s '.[0] + .[1]' sendgrid.json appsettings.json > final_tmp.json && mv final_tmp.json appsettings.json
      - run:
          name: 'Update Elastic Beanstalk Deploy Defaults'
          command: |
            cd src/WingedKeys
            jq '.application="ece-wingedkeys-<< parameters.stage >>-app"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
            jq '.environment="ece-wingedkeys-<< parameters.stage >>-env"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
            jq '."instance-profile"="ece-wingedkeys-<< parameters.stage >>-eb-ec2"' aws-beanstalk-tools-defaults.json > temp.json && mv temp.json aws-beanstalk-tools-defaults.json
      - add_ssh_keys
      - run:
          name: Generate Migrations
          command: |
            export ConnectionStrings__WingedKeys=xxx && dotnet-ef --verbose migrations script --idempotent --output winged-keys-persisted-db.sql --context PersistedGrantDbContext --project src/WingedKeys
            export ConnectionStrings__WingedKeys=xxx && dotnet-ef --verbose migrations script --idempotent --output winged-keys-configuration-db.sql --context ConfigurationDbContext --project src/WingedKeys
            export ConnectionStrings__WingedKeys=xxx && dotnet-ef --verbose migrations script --idempotent --output winged-keys-wingedkeys-db.sql --context WingedKeysContext --project src/WingedKeys
      - run:
          name: 'Put SQL Migrations on Jump Server'
          command: |
            scp winged-keys-configuration-db.sql ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com:/home/ubuntu/
            scp winged-keys-persisted-db.sql ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com:/home/ubuntu/
            scp winged-keys-wingedkeys-db.sql ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com:/home/ubuntu/
      - run:
          name: 'Run SQL Migrations'
          command: |
            ssh ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com "cd /home/ubuntu/ && /home/ubuntu/scripts/db-migrate-wingedkeys.sh winged-keys-configuration-db.sql && /home/ubuntu/scripts/db-migrate-wingedkeys.sh winged-keys-persisted-db.sql && /home/ubuntu/scripts/db-migrate-wingedkeys.sh winged-keys-wingedkeys-db.sql"
      - run:
          name: 'Remove Migrations from Jump Server'
          command: |
            ssh ubuntu@<< parameters.stage >>.ece-jumpserver.ctoecskylight.com "cd /home/ubuntu/ && rm winged-keys-configuration-db.sql winged-keys-persisted-db.sql winged-keys-wingedkeys-db.sql"
      - run:
          name: "Deploy the application"
          command: |
            cd src/WingedKeys
            dotnet eb deploy-environment

workflows:
  auto-deploy:
    jobs:
      - deploy:
          stage: staging
          dotnet-env: Staging
          filters:
            branches:
              only: master
  deploy-to-staging:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: staging
          dotnet-env: Staging
          requires:
            - hold
  deploy-to-devsecure:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: devsecure
          requires:
            - hold
  deploy-to-qa:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: qa
          requires:
            - hold
  deploy-to-prod:
    jobs:
      - hold:
          type: approval
      - deploy:
          stage: prod
          dotnet-env: Production
          additional-clients: "https://ece-reporter.ctoec.org,"
          requires:
            - hold